// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique
  name      String
  role      ROLE       @default(USER)
  image     String
  campaigns Campaign[]
}

enum ROLE {
  USER
  ADMIN
}

model Campaign {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  name         String       @unique @default("")
  advertiser   Advertiser?  @relation(fields: [advertiserID], references: [id], onDelete: SetNull)
  advertiserID String?      @default("")
  ordernumber  String?
  status       STATUS       @default(OFFER)
  creatorId    String?
  offers       OfferGroup[]
  bookings     Booking[]
  creator      User?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
}

model Booking {
  id         String    @id @default(uuid())
  dispo      String?
  reach      Int?
  start      DateTime?
  end        DateTime?
  product    PRODUCT?
  rotation   String
  tkp        Float?
  targeting  String
  output     String?
  campaign   Campaign  @relation(fields: [campaignID], references: [id], onDelete: Cascade)
  campaignID String
}

enum PRODUCT {
  NONSKIPPABLE
  SKIPPABLE
  BUMPTER
}

enum STATUS {
  OFFER
  SOLD
  RUNNING
  COMPLETED
}

model Offer {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  reach        Int?
  start        DateTime?
  end          DateTime?
  product      PRODUCT?
  rotation     String
  tkp          Float?
  output       String?
  targeting    String?
  offergroup   OfferGroup? @relation(fields: [offerGroupID], references: [id], onDelete: Cascade)
  offerGroupID String?
}

model OfferGroup {
  id          String    @id @default(uuid())
  offernumber Int       @default(autoincrement())
  campaign    Campaign? @relation(fields: [campaignID], references: [id], onDelete: Cascade)
  campaignID  String?
  offers      Offer[]
}

model Creator {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  channelID    String    @unique
  channelName  String
  share        Int
  company      String
  goal         Float
  demographics Json?
  anbindung    Anbindung @default(OWNED)
  image        String
}

enum Anbindung {
  OWNED
  TALENT
}

model Advertiser {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @unique
  campaigns Campaign[]
}

model Report {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  entries   ReportEntry[]
}

model ReportEntry {
  id                        String   @id @default(uuid())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  report                    Report   @relation(fields: [reportID], references: [id])
  reportID                  String
  channelID                 String
  date                      DateTime
  revenueAdsense            Float
  revenueSubscription       Float
  revenueShortsSubscription Float
  revenueShortsAds          Float
  revenuePaidFeatures       Float
  revenueAdManager          Float
  revenueAusgleich          Float
  delta                     Float
  payout                    Float
}
